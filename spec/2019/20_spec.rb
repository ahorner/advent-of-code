require "spec_helper"

describe "Day 20: Donut Maze" do
  let(:runner) { Runner.new("2019/20") }

  describe "Part One" do
    let(:solution) { runner.execute!(input, part: 1) }
    let(:input) do
      <<~TXT
                 A
                 A
          #######.#########
          #######.........#
          #######.#######.#
          #######.#######.#
          #######.#######.#
          #####  B    ###.#
        BC...##  C    ###.#
          ##.##       ###.#
          ##...DE  F  ###.#
          #####    G  ###.#
          #########.#####.#
        DE..#######...###.#
          #.#########.###.#
        FG..#########.....#
          ###########.#####
                     Z
                     Z
      TXT
    end

    it "finds the shortest path from AA to ZZ" do
      expect(solution).to eq(23)
    end

    describe "given a larger map" do
      let(:input) do
        <<~TXT
                             A
                             A
            #################.#############
            #.#...#...................#.#.#
            #.#.#.###.###.###.#########.#.#
            #.#.#.......#...#.....#.#.#...#
            #.#########.###.#####.#.#.###.#
            #.............#.#.....#.......#
            ###.###########.###.#####.#.#.#
            #.....#        A   C    #.#.#.#
            #######        S   P    #####.#
            #.#...#                 #......VT
            #.#.#.#                 #.#####
            #...#.#               YN....#.#
            #.###.#                 #####.#
          DI....#.#                 #.....#
            #####.#                 #.###.#
          ZZ......#               QG....#..AS
            ###.###                 #######
          JO..#.#.#                 #.....#
            #.#.#.#                 ###.#.#
            #...#..DI             BU....#..LF
            #####.#                 #.#####
          YN......#               VT..#....QG
            #.###.#                 #.###.#
            #.#...#                 #.....#
            ###.###    J L     J    #.#.###
            #.....#    O F     P    #.#...#
            #.###.#####.#.#####.#####.###.#
            #...#.#.#...#.....#.....#.#...#
            #.#####.###.###.#.#.#########.#
            #...#.#.....#...#.#.#.#.....#.#
            #.###.#####.###.###.#.#.#######
            #.#.........#...#.............#
            #########.###.###.#############
                     B   J   C
                     U   P   P
        TXT
      end

      it "finds the shortest path from AA to ZZ" do
        expect(solution).to eq(58)
      end
    end
  end

  describe "Part Two" do
    let(:solution) { runner.execute!(input, part: 2) }
    let(:input) do
      <<~TXT
                     Z L X W       C
                     Z P Q B       K
          ###########.#.#.#.#######.###############
          #...#.......#.#.......#.#.......#.#.#...#
          ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###
          #.#...#.#.#...#.#.#...#...#...#.#.......#
          #.###.#######.###.###.#.###.###.#.#######
          #...#.......#.#...#...#.............#...#
          #.#########.#######.#.#######.#######.###
          #...#.#    F       R I       Z    #.#.#.#
          #.###.#    D       E C       H    #.#.#.#
          #.#...#                           #...#.#
          #.###.#                           #.###.#
          #.#....OA                       WB..#.#..ZH
          #.###.#                           #.#.#.#
        CJ......#                           #.....#
          #######                           #######
          #.#....CK                         #......IC
          #.###.#                           #.###.#
          #.....#                           #...#.#
          ###.###                           #.#.#.#
        XF....#.#                         RF..#.#.#
          #####.#                           #######
          #......CJ                       NM..#...#
          ###.#.#                           #.###.#
        RE....#.#                           #......RF
          ###.###        X   X       L      #.#.#.#
          #.....#        F   Q       P      #.#.#.#
          ###.###########.###.#######.#########.###
          #.....#...#.....#.......#...#.....#.#...#
          #####.#.###.#######.#######.###.###.#.#.#
          #.......#.......#.#.#.#.#...#...#...#.#.#
          #####.###.#####.#.#.#.#.###.###.#.###.###
          #.......#.....#.#...#...............#...#
          #############.#.#.###.###################
                       A O F   N
                       A A D   M
      TXT
    end

    it "finds the shortest recursive path to the exit" do
      expect(solution).to eq(396)
    end
  end
end
